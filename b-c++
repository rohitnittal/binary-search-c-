#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int d) {
        data = d;
        left = right = nullptr;
    }
};

class BST {
public:
    Node* root;

    BST() { root = nullptr; }

    Node* insert(Node* root, int data) {
        if (root == nullptr) {
            root = new Node(data);
            return root;
        }

        if (data < root->data) {
            root->left = insert(root->left, data);
        } else if (data > root->data) {
            root->right = insert(root->right, data);
        }

        return root;
    }

    Node* search(Node* root, int data) {
        if (root == nullptr || root->data == data) {
            return root;
        }

        if (root->data < data) {
            return search(root->right, data);
        }

        return search(root->left, data);
    }
};

int main() {
    BST bst;
    bst.root = bst.insert(bst.root, 50);
    bst.insert(bst.root, 30);
    bst.insert(bst.root, 20);
    bst.insert(bst.root, 40);
    bst.insert(bst.root, 70);
    bst.insert(bst.root, 60);
    bst.insert(bst.root, 80);

    Node* found = bst.search(bst.root, 40);

    if (found != nullptr) {
        cout << "Found " << found->data << endl;
    } else {
        cout << "Not found" << endl;
    }

    return 0;
}
